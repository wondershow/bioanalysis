<html>
  <head>
    <!--Load the AJAX API-->
    <script type="text/javascript" src="https://www.google.com/jsapi"></script>
    <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script>
	<style>
		.circleBase {
    border-radius: 50%;
    behavior: url(PIE.htc); /* remove if you don't care about IE8 */
}

.type1 {
    width: 25px;
    height: 25px;
    background: yellow;
}
.type2 {
    width: 50px;
    height: 50px;
    background: #ccc;
}
.type3 {
    width: 500px;
    height: 500px;
    background: aqua;
    border: 30px solid blue;
}

	</style>
    <script type="text/javascript">
      var x_field = null;
      var y_field = null;
      var z_field = null;
      var d_field = null;

	  var HTML_COLORS = [ "green","orange", "black", "blue","red", "fuchsia", "gray", "lime", "maroon", "navy", "olive", , "purple", 		   "silver", "teal", "white",  "yellow"];
	

      
      // Load the Visualization API and the controls package.
      google.load('visualization', '1.0', {'packages':['controls']});

      // Set a callback to run when the Google Visualization API is loaded.
      //google.setOnLoadCallback(drawDashboarHTML_COLORSd);
      
      
      function getColNum(colNameArr,colName) {
	  	var i=0;
	  	for(;i<colNameArr.length;i++) {
	   	if(colNameArr[i] == colName) return i;
	 	}
	  return -1;
      }

	  function getMax(a) {
		var i=0;
		var res = -1;
		for(;i<a.length;i++) {
			if(parseInt(a[i]) > res)
				res = parseInt(a[i]);		
		}
		return res;
	  }

	  function getMin(a){
		var i = 0;
		var res = 10000;
		for(;i<a.length;i++) {
			if(parseInt(a[i]) < res)
				res = parseInt(a[i]);		
		}
		return res;
	  }

		
	  function generatePointDescription(d_value,z_value,fullDataSet) {

		var d_dataset = getDistinctiveValues(d_field,fullDataSet);
		var index_of_color = arrayContains(d_dataset,d_value);
		var color_name = HTML_COLORS[index_of_color];

		var pointSize = -1;

		var res = "";
		if(z_value != null && z_value != "") {
			pointSize = getPointSize(z_value,fullDataSet);
			res = 'point { size : ' + pointSize +';fill-color:' + color_name;
		} else 			
		res = 'point { fill-color:' + color_name;
		return res;
	}

	function getDistinctiveValues(fieldName,dataSet) {
		var res = [];
		var index = getColNum(dataSet[0],fieldName);
		var i = 1;
		for(;i<dataSet.length;i++) {
			if(arrayContains(res,dataSet[i][index]) === false) {
				//console.log("The array is " + res + ", I am adding " + 	dataSet[i][index] + ",The return value is "
				//+ arrayContains(res,dataSet[i][index]) )
				res.push(dataSet[i][index]);
			}
		}	
		return res;
	}

	/*
		returns if an array contains a key
	*/
	function arrayContains(a, obj) {
		//console.log("I have " + a + ", incoding is " + obj);
   		var i = a.length;
   		while (i--) {
			//console.log("a["+i+"] = " + a[i] + ",obj = " +  obj+ " a[i] == obj = " + (a[i] == obj) );	
      		if (a[i] == obj) {
          		return i;
      		}
   		}
   		return false;
	}


	function getPointSize(size,fullDataSet) {
		var sizeArr = getDistinctiveValues(z_field,fullDataSet);
		var max = getMax(sizeArr);
		var min = getMin(sizeArr);  
		res = Math.round( 10 * ((size-min)/(max-min)) ) + 3;
		return res;
	}

	function getAllInfo(row,fullDataSet) {
		res = "";
		var i=0;
		for(;i<fullDataSet[0].length;i++)
			res += fullDataSet[0][i] + ":" + fullDataSet[row][i] + "\n";

		return res;
	}

	function createLegend(fullDataSet) {
		var d_dataset = getDistinctiveValues(d_field,fullDataSet);
		console.log(d_dataset);
		var i=0;
		var color_name;
		var legend_div = document.getElementById("legend");
		//legend_div.innerHTML = "";
		var legend_table = document.getElementById("legend_table");
		var orig_html = legend_table.innerHTML;
		for(;i<d_dataset.length;i++) {
			orig_html = legend_table.innerHTML;
			color_name = HTML_COLORS[i];
			//'+ d_dataset[i] +'
			var tmp;
			if (d_dataset[i]==undefined)
				tmp = '<td>undefined</td><td><div class="circleBase type1" style="background-color:'+color_name+'"></div></td>';
			else if (d_dataset[i]=="")
				tmp = '<td>N/A</td><td><div class="circleBase type1" style="background-color:'+color_name+'"></div></td>';
			else tmp = '<td>'+d_dataset[i]+'</td><td><div class="circleBase type1" style="background-color:'+color_name+'"></div></td>';
			legend_table.innerHTML = orig_html + tmp;
			console.log("tmp = " + tmp);
		}
		legend_div.style.visibility="visible";
		console.log(legend_div.innerHTML);
	}
	

    // Callback that creates and populates a data table,
    // instantiates a dashboard, a range slider and a pie chart,
    // passes in the data and draws it.
    function drawDashboard(fullDataSet) {
	
	var headLine = fullDataSet[0];
	var x_col = getColNum(headLine,x_field);
	var y_col = getColNum(headLine,y_field);
	var z_col = getColNum(headLine,z_field);
	var d_col = getColNum(headLine,d_field);
      
	
	
	var data_tbl = new google.visualization.DataTable();
        data_tbl.addColumn('number', x_field);
        data_tbl.addColumn('number', y_field);
		
		d_dataset = getDistinctiveValues(d_field,fullDataSet);
// Create a range slider, passing some options
        var donutRangeSlider = new google.visualization.ControlWrapper({
          'controlType': 'NumberRangeFilter',
          'containerId': 'filter_div',
          'options': {
            'filterColumnLabel': 'Donuts eaten'
          }
        });

		
		/*
        var i =1;
        for(;i<fullDataSet.length;i++) {
	  		data_tbl.addRow([parseInt(fullDataSet[i][x_col]),parseInt(fullDataSet[i][y_col])  ]);
        }*/
		
		var pntDesc = generatePointDescription(fullDataSet[1][d_col],null,fullDataSet);
		
        data_tbl = google.visualization.arrayToDataTable
            ([[x_field, y_field, {'type': 'string', 'role': 'style'},{type: 'string', role: 'tooltip'}],
              [parseInt(fullDataSet[1][x_col]), parseInt(fullDataSet[1][y_col]), pntDesc,'xyz']
        ]);

		
		var i =2;
        for(;i<fullDataSet.length;i++) {
			if(z_field!=null)
				pntDesc = generatePointDescription(fullDataSet[i][d_col],fullDataSet[i][z_col],fullDataSet);
			else
				pntDesc = generatePointDescription(fullDataSet[i][d_col],null,fullDataSet);
	  		data_tbl.addRow([parseInt(fullDataSet[i][x_col]),parseInt(fullDataSet[i][y_col]),pntDesc,getAllInfo(i,fullDataSet)]);
        }
	
        // Create a dashboard.
        var dashboard = new google.visualization.Dashboard(
            document.getElementById('dashboard_div'));

        // Create a range slider, passing some options
        var donutRangeSlider = new google.visualization.ControlWrapper({
          'controlType': 'NumberRangeFilter',
          'containerId': 'filter_div',
          'options': {
            'filterColumnLabel': x_field
          }
        });
        
        // Create a range slider, passing some optionsdashboard_div
        var donutRangeSlider1 = new google.visualization.ControlWrapper({
          'controlType': 'NumberRangeFilter',
          'containerId': 'filter_div2',
          'options': {
            'filterColumnLabel': y_field
          }
        })
        
// Create a range slider, passing some options
        var donutRangeSlider2 = new google.visualization.ControlWrapper({
          'controlType': 'CategoryFilter',
          'containerId': 'filter_div3',
          'options': {
            'filterColumnLabel': d_field
          }
        });

        
        
        

        // Create a pie chart, passing some options
        var pieChart = new google.visualization.ChartWrapper({
          'chartType': 'ScatterChart',
          'containerId': 'chart_div',
          'options': {
            'width': 1000,
            'height': 600,
            'pieSliceText': 'value',
            'legend': 'right',
            'align':'right'
          }
        });

        // Establish dependencies, declaring that 'filter' drives 'pieChart',
        // so that the pie chart will only display entries that are let through
        // given the chosen slider range.
        dashboard.bind(donutRangeSlider, pieChart);
		dashboard.bind(donutRangeSlider1, pieChart);
		//dashboard.bind(donutRangeSlider2, pieChart);

        // Draw the dashboard.
        dashboard.draw(data_tbl);
		createLegend(fullDataSet);
      }

      function draw() {
		var tmp;
		tmp = document.getElementById("x_field");
		x_field = tmp.options[tmp.selectedIndex].value;

		tmp = document.getElementById("y_field");
		y_field = tmp.options[tmp.selectedIndex].value;
		
		tmp = document.getElementById("z_field");
		z_field = tmp.options[tmp.selectedIndex].value;

		tmp = document.getElementById("d_field");
		d_field = tmp.options[tmp.selectedIndex].value;
Wednesday, October 1st,2014, noon
Thursday, October 16th, 2014, noon
Wednesday, November 12th, 2014, 5:30pm

		if ( x_field=="" || y_field=="" || d_field == "") {
		  document.getElementById("alertmsg").innerHTML = "Please select field X, Y and Data";
		} else if( x_field == y_field) {
		  document.getElementById("alertmsg").innerHTML = "Field X and Y are same";
		} else if( y_field == z_field) {
		  document.getElementById("alertmsg").innerHTML = "Field Y and Z are same";
		} else if( x_field == z_field) {
		  document.getElementById("alertmsg").innerHTML = "Field X and Z are same";
		} else {
		  document.getElementById("alertmsg").innerHTML = "";
		  getCSVData();
		}

	}
	
	function getCSVData() {
	    $.ajax("http://131.96.131.227/google/	.csv", {
		success: function(data) {
		processData(data);
	      
	    },
	    error: function() {
	    // Show some error message, couldn't get the CSV file
	    }
	    });
	}
	
	function processData(data) {
	  dataArray = CSVToArray(data);
	  drawDashboard(dataArray);
	}
    </script>
    
    
    <script type="text/javascript">
    // ref: http://stackoverflow.com/a/1293163/2343
    // This will parse a delimited string into an array of
    // arrays. The default delimiter is the comma, but this
    // can be overriden in the second argument.
    function CSVToArray( strData, strDelimiter ){
        // Check to see if the delimiter is defined. If not,
        // then default to comma.
        strDelimiter = (strDelimiter || ",");

        // Create a regular expression to parse the CSV values.
        var objPattern = new RegExp(
            (
                // Delimiters.
                "(\\" + strDelimiter + "|\\r?\\n|\\r|^)" +

                // Quoted fields.
                "(?:\"([^\"]*(?:\"\"[^\"]*)*)\"|" +

                // Standard fields.
                "([^\"\\" + strDelimiter + "\\r\\n]*))"
            ),
            "gi"
            );


        // Create an array to hold our data. Give the array
        // a default empty first row.
        var arrData = [[]];

        // Create an array to hold our individual pattern
        // matching groups.
        var arrMatches = null;


        // Keep looping over the regular expression matches
        // until we can no longer find a match.
        while (arrMatches = objPattern.exec( strData )){

            // Get the delimiter that was found.
            var strMatchedDelimiter = arrMatches[ 1 ];

            // Check to see if the given delimiter has a length
            // (is not the start of string) and if it matches
            // field delimiter. If id does not, then we know
            // that this delimiter is a row delimiter.
            if (
                strMatchedDelimiter.length &&
                strMatchedDelimiter !== strDelimiter
                ){

                // Since we have reached a new row of data,
                // add an empty row to our data array.
                arrData.push( [] );

            }

            var strMatchedValue;

            // Now that we have our delimiter out of the way,
            // let's check to see which kind of value we
            // captured (quoted or unquoted).
            if (arrMatches[ 2 ]){

                // We found a quoted value. When we capture
                // this value, unescape any double quotes.
                strMatchedValue = arrMatches[ 2 ].replace(
                    new RegExp( "\"\"", "g" ),
                    "\""
                    );

            } else {

                // We found a non-quoted value.
                strMatchedValue = arrMatches[ 3 ];

            }


            // Now that we have our value string, let's add
            // it to the data array.
            arrData[ arrData.length - 1 ].push( strMatchedValue );
        }

        // Return the parsed data.
        return( arrData );
    }

</script>	
  </head>
	
  <body>
	<div style = "background-color:#99CCFF;width:100%;height:100;align:center"> 
		<table style="width:80%">
			<tr>
				<td> 
					X  : 
					<select id="x_field">
						<option></option>
						<option>NucCount</option>
				        <option>PH3</option>
						<option>KI67</option>
						<option>t</option>
						<option>Age</option>
						<option>MFI</option>
						<option>KI67_Percent</option>
						<option>PH3_Percent</option>
	 				</select>
				</td>
				<td> 
					Y  :
					<select id="y_field">
						<option></option>
						<option>NucCount</option>
				        <option>PH3</option>
						<option>KI67</option>
						<option>t</option>
						<option>Age</option>
						<option>MFI</option>
						<option>KI67_Percent</option>
						<option>PH3_Percent</option>
	 				</select>
				</td>
				<td> 
					Z (optional):
					<select id="z_field">
						<option></option>
						<option>NucCount</option>
						<option>PH3</option>
						<option>KI67</option>
						<option>t</option>
						<option>Age</option>
						<option>MFI</option>
						<option>KI67_Percent</option>
						<option>PH3_Percent</option>
	 				</select>
				</td>
				<td> 
					data :
					<select id="d_field">
						<option></option>
						<option>UpGrade</option>
						<option>UpNot</option>
						<option>Grade</option>
						<option>Notin</option>10
						<option>gland</option>
						<option>mi</option>
						<option>checkNot</option>
						<option>pt</option>
						<option>Stages</option>
						<option>Race</option>
						<option>ER</option>
						<option>PR</option>
						<option>HER2</option>10
						<option>HER2Status</option>
						<option>TN</option>
						<option>Tstage</option>
						<option>Nstage</option>
						<option>Final_Grade</option>
						<option>Final_Not</option>
						<option>AdjustedNot</option>
						<option>Adjusted1</option>
	 				</select>
				</td>
				<td align='right'>
					<button id='drawbutton' onclick="draw()"> Draw</button>
			    </td>
			</tr>
			<tr>
			    <th colspan=5>
				<font color="red" size="5"  face="courier" id="alertmsg"></font> 
			    </th>
			</tr>
		</table>
		
	</div>
	
    <!--Div that will hold the dashboard-->
    <div id="dashboard_div">
		<table>
			<tr>
				<td>
	<div id="filter_div"></div>
				</td>
				<td>
	<div id="filter_div2"></div>
				</td>
				<td>
	<div id="filter_div3"></div>
				</td>
			</tr>
		</table>
	<div id='legend' style="visibility: hidden; display:inline;">
		<table>
			<tr id = 'legend_table'>
				<td>
					Legend:
				</td>
			</tr>
		</table>
	</div>

	<div id="chart_div"></div>
    </div>
    
  </body>
</html>







TBD	TBD	01/22/2015 Thursday - 12:00pm TBD	
TBD	02/05/2015 - 5:30pm TBD	
TBD	02/18/2015 - 12:00pm TBD	
TBD	03/05/2015 - 12:00pm TBD	
TBD	03/25/2015 - 5:30pm TBD	
TBD	04/08/2015 - 12:00pm
